version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092" # For external access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      # KAFKA_SASL_ENABLED_MECHANISMS: "PLAIN"
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: "SASL_PLAINTEXT"
      KAFKA_OPTS: ""
      KAFKA_ZOOKEEPER_SASL_ENABLED: "false"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 2>/dev/null || exit 1"]
      interval: 20s
      timeout: 30s
      retries: 15
      start_period: 90s
    # stdin_open: true # docker run -i
    # tty: true # docker run -t
    # command: ["bash", "-c", "tail -f /dev/null"]

  data-generator:
    build: ./data_generator
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: "kafka:9092"
      TOPIC_NAME: "raw_orders"
    healthcheck:
      test: ["CMD-SHELL", 'python -c ''import os; assert "KAFKA_BROKER" in os.environ''']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    command: sh -c "while true; do python generate_orders.py; sleep 10; done"

  kafka-consumer:
    build: ./kafka_consumer
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      TOPIC_NAME: raw_orders
      DB_HOST: postgres
      DB_NAME: ecommerce
      DB_USER: postgres
      DB_PASSWORD: postgres
    # Add retry logic in the command
    command: sh -c "echo 'Waiting for Kafka to be ready...';
      while ! nc -z kafka 9092; do sleep 5; done;
      echo 'Kafka is ready! Starting consumer...';
      python consumer.py"

  postgres:
    image: postgres:13
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce"]
      interval: 5s
      timeout: 5s
      retries: 10
      # start_period: 30s

  dashboard:
    build: ./dashboard
    depends_on:
      - postgres
    ports:
      - "5000:5000"
    environment:
      DB_HOST: postgres
      DB_NAME: ecommerce
      DB_USER: postgres
      DB_PASSWORD: postgres

volumes:
  postgres_data:
